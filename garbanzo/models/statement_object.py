# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class StatementObject(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, semantic_group: str=None):
        """
        StatementObject - a model defined in Swagger

        :param id: The id of this StatementObject.
        :type id: str
        :param name: The name of this StatementObject.
        :type name: str
        :param semantic_group: The semantic_group of this StatementObject.
        :type semantic_group: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'semantic_group': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'semantic_group': 'semanticGroup'
        }

        self._id = id
        self._name = name
        self._semantic_group = semantic_group

    @classmethod
    def from_dict(cls, dikt) -> 'StatementObject':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StatementObject of this StatementObject.
        :rtype: StatementObject
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this StatementObject.
        CURIE-encoded identifier of object concept 

        :return: The id of this StatementObject.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this StatementObject.
        CURIE-encoded identifier of object concept 

        :param id: The id of this StatementObject.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this StatementObject.
        human readable label of object concept

        :return: The name of this StatementObject.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this StatementObject.
        human readable label of object concept

        :param name: The name of this StatementObject.
        :type name: str
        """

        self._name = name

    @property
    def semantic_group(self) -> str:
        """
        Gets the semantic_group of this StatementObject.
        a semantic group for the object concept (specified as a code CHEM, GENE, etc. - see [Semantic Groups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes) 

        :return: The semantic_group of this StatementObject.
        :rtype: str
        """
        return self._semantic_group

    @semantic_group.setter
    def semantic_group(self, semantic_group: str):
        """
        Sets the semantic_group of this StatementObject.
        a semantic group for the object concept (specified as a code CHEM, GENE, etc. - see [Semantic Groups](https://metamap.nlm.nih.gov/Docs/SemGroups_2013.txt) for the full list of codes) 

        :param semantic_group: The semantic_group of this StatementObject.
        :type semantic_group: str
        """

        self._semantic_group = semantic_group

