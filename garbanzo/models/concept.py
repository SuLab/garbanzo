# coding: utf-8

from __future__ import absolute_import
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Concept(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, semantic_group: str=None, synonyms: List[str]=None, definition: str=None):
        """
        Concept - a model defined in Swagger

        :param id: The id of this Concept.
        :type id: str
        :param name: The name of this Concept.
        :type name: str
        :param semantic_group: The semantic_group of this Concept.
        :type semantic_group: str
        :param synonyms: The synonyms of this Concept.
        :type synonyms: List[str]
        :param definition: The definition of this Concept.
        :type definition: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'semantic_group': str,
            'synonyms': List[str],
            'definition': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'semantic_group': 'semanticGroup',
            'synonyms': 'synonyms',
            'definition': 'definition'
        }

        self._id = id
        self._name = name
        self._semantic_group = semantic_group
        self._synonyms = synonyms
        self._definition = definition

    @classmethod
    def from_dict(cls, dikt) -> 'Concept':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Concept of this Concept.
        :rtype: Concept
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """
        Gets the id of this Concept.
        local object identifier for the concept in the specified knowledge source database 

        :return: The id of this Concept.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """
        Sets the id of this Concept.
        local object identifier for the concept in the specified knowledge source database 

        :param id: The id of this Concept.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """
        Gets the name of this Concept.
        canonical human readable name of the concept 

        :return: The name of this Concept.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Concept.
        canonical human readable name of the concept 

        :param name: The name of this Concept.
        :type name: str
        """

        self._name = name

    @property
    def semantic_group(self) -> str:
        """
        Gets the semantic_group of this Concept.
        concept semantic type 

        :return: The semantic_group of this Concept.
        :rtype: str
        """
        return self._semantic_group

    @semantic_group.setter
    def semantic_group(self, semantic_group: str):
        """
        Sets the semantic_group of this Concept.
        concept semantic type 

        :param semantic_group: The semantic_group of this Concept.
        :type semantic_group: str
        """

        self._semantic_group = semantic_group

    @property
    def synonyms(self) -> List[str]:
        """
        Gets the synonyms of this Concept.
        list of synonyms for concept 

        :return: The synonyms of this Concept.
        :rtype: List[str]
        """
        return self._synonyms

    @synonyms.setter
    def synonyms(self, synonyms: List[str]):
        """
        Sets the synonyms of this Concept.
        list of synonyms for concept 

        :param synonyms: The synonyms of this Concept.
        :type synonyms: List[str]
        """

        self._synonyms = synonyms

    @property
    def definition(self) -> str:
        """
        Gets the definition of this Concept.
        concept definition 

        :return: The definition of this Concept.
        :rtype: str
        """
        return self._definition

    @definition.setter
    def definition(self, definition: str):
        """
        Sets the definition of this Concept.
        concept definition 

        :param definition: The definition of this Concept.
        :type definition: str
        """

        self._definition = definition

